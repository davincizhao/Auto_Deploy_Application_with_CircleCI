version: 2.1




commands:

  print_id:
    parameters:
      id: 
        type: string
    steps:
      - run: echo << parameters.id >>

  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      wf_id: 
        type: string
       
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name parameters.FE-<< parameters.wf_id>>
            aws cloudformation delete-stack --stack-name parameters.BE-<< parameters.wf_id>>
            aws s3 rb s3://udapeople-<< parameters.wf_id >> --force

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
      wf_id: 
        type: string

    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            
            SUCCESS=`curl -H "Content-Type: text/plain" -H "token: 168adf74-cf73-4306-b98b-ef5840ec7fac" \
                    --request GET \
                    https://api.memstash.io/values/migration_<<parameters.wf_id>>`
            echo $SUCCESS
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
            #  Add revert code here. You can find this in the Getting Started section.
              npm run migration:revert
            fi
            
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # add kun coding
            cd frontend
            echo `pwd`
            npm install
            npm run build
            #exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # add kun's code here
             cd backend
             echo `pwd`
             npm install 
             npm run build
             #exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0     
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend tests
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0      
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end dependencies
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical || true

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan back-end dependencies
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical || true

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=back_end \
              --stack-name BE-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - print_id: 
          id: <<pipeline.id>>        
             
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=front_end \
              --stack-name FE-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
  
      - run: 
          name: install tar and gzip for persist_to_workspace
          command: yum install -y tar gzip 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt

            aws ec2 describe-instances   \
              --query Reservations[*].Instances[*].[PublicIpAddress] \
              --filters Name=tag-value,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths: 
            - project/.circleci/ansible/inventory.txt
  
      - destroy_environment:
          wf_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys: 
          fingerprints: ["01:b3:9a:eb:5e:10:73:34:ef:c8:9d:b4:19:e4:b1:bc"]
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update ansible 
            pip install awscli
      - attach_workspace: 
          at: ~/

      - run:
          name: Configure server
          command: |
            # Your code here
            cat .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure                             
      - destroy_environment:
          wf_id: ${CIRCLE_WORKFLOW_ID:0:7}


  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
      
    steps:
      # Checkout code from git
      - checkout

      - run:
          name: load env vars from circleci into backend/.env
          command: |
            echo ENVIRONMENT=development > backend/.env
            echo TYPEORM_CONNECTION=postgres >> backend/.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=development >> "backend/.env"
            echo ${TYPEORM_DATABASE}
      - restore_cache:
          keys: [backend-build]

      - persist_to_workspace:
          root: ~/
          paths:

            - project/backend/.env

      - run:
          name: Run migrations
          command: |
            cd backend
            cat .env
            npm run migrations > migrations.log
            cat migrations.log
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            echo <<CIRCLE_WORKFLOW_ID:0:7>>
            
            echo  migration_${CIRCLE_WORKFLOW_ID:0:7}
      - destroy_environment:
          wf_id: ${CIRCLE_WORKFLOW_ID:0:7}      
     # Here's where you will add some code to rollback on failure      
      

  deploy-frontend:
    docker:
      - image: amazon/aws-cli      
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here                  
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend && \
            
            API_URL="http://${EC2_PUBLIC_URL}:3030" && \
            echo API_URL=$API_URL && \
            echo API_URL=$API_URL > .env && \
            echo ENVIRONMENT=development >> .env && \
            npm i && \
            npm run build && \
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - run:
          name: Front-end s3 URL
          command: |
            echo s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      #- revert-migrations

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["01:b3:9a:eb:5e:10:73:34:ef:c8:9d:b4:19:e4:b1:bc"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible 
            pip install awscli
      - run:
          name: Deploy backend
          no_output_timeout: 30m
          command: |
            tar -C backend -czvf backend_artifact.tar.gz . && \
            cd .circleci/ansible && \
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      #- revert-migrations



workflows:
  default:
    jobs:
      #- build-frontend
      #- build-backend
      #- test-frontend:
      #    requires: [build-frontend]
      #- test-backend:
      #    requires: [build-backend]
      #- scan-backend:
      #    requires: [build-backend]
      #- scan-frontend:
       #   requires: [build-frontend]
      #- deploy-infrastructure 
      #- configure-infrastructure: 
      #    requires: [deploy-infrastructure]
      - run-migrations 
       #   requires: [configure-infrastructure]      

